====== Фильтры шаблонной системы MACRO ======
===== Фильтры для обработки текста =====
==== clip ====
Позволяет ограничить вывод длинной строки, указывая количество символов, и символы на границе.
<code php>
<? $variable = "12345"; ?>
{$variable|clip:3,'...'}
//Результат: "123..."
</code>

==== nl2br ====
Добавляет рядом с символом \n тег <br/>
<code php>
<? $variable = "first line \n second line"; ?>
{$variable|nl2br}
//Результат: "first line <br/>
second line"
</code>

==== raw ====
Выводит значение переменной в неизменной виде. Дело в том, что по-умолчанию, значение переменной обрабатывается htmlspecialchars. Если указан фильтр raw, то такая обработка не производится.
<code php>
<? $variable = "<>"; ?>
{$variable}{$variable|raw}
//Результат: "&lt;&gt<>"
</code>

==== striptags ====
Убирает из значения переменной все теги.
<code php>
<? $variable = "<p>Hello</p>"; ?>
{$variable|striptags}
//Результат: "Hello"
</code>

==== strtolower ====
Приводит значение переменной в нижний регистр.
<code php>
<? $variable = "FOO"; ?>
{$variable|strtolower}
//Результат: "foo"
</code>

==== strtoupper ====
Приводит значение переменной в верхний регистр.
<code php>
<? $variable = "foo"; ?>
{$variable|strtoupper}
//Результат: "FOO"
</code>

==== trim ====
Позволяет убирать с конца и с начала строки пробелы или другие символы.
<code php>
<? $variable = "           foo    "; ?>
{$variable|trim}
//Результат: "foo"
</code>

==== ucfirst ====
Приводит первую букву значения переменной в верхний регистр.
<code php>
<? $variable = "foo"; ?>
{$variable|ucfirst}
//Результат: "Foo"
</code>

==== utf8_encode ====
Преобразует Latin-1 строку в строку UTF-8. 

==== recognize_urls ====
Находит в тексте ссылки, и обворачивает их в тэг <a>.

<code php>
<? $string = "foo http://somehost.com/ www.somehost2.com/bar baz"; ?>
{$string|recognize_urls}
//Результат: "foo <a href="http://somehost.com/">http://somehost.com/</a> <a href="http://www.somehost2.com/bar">www.somehost2.com/bar</a> baz"
</code>

===== Фильтры пакета i18n =====

==== i18n_capitalize ====

Переносит в верхний регистр первую букву в строке. Специально для мультибайтовых (уникод) строк.

<code php>
<?php $string = 'строка'; ?>
{$string|i18n_capitalize}
//Результат: Строка
</code>

==== i18n_clip ====

Обрезает строку до заданного размера. Специально для мультибайтовых (уникод) строк.
^Параметры^Описание^
|Длина|Длина строки в результате|
|Начало|Позиция, начиная с которой обрезать исходную строку|
|Строка в конце|Строка, которая добавляется в конец результирующей строки|

<code php>
<?php $string = 'фреймворк для веб-приложений'; ?>
{$string|i18n_clip:4,5,"..."}
//Результат: ворк...
</code>

==== i18n_date ====

Форматирует даты в соответствии с установленой локалью.
^Параметры^Описание^Некоторые возможные значения^
|Локаль|Если этот параметр не указан (пустая строка вместо реального значения), тогда в качестве локали будет использована текущая локаль, установленная в lmbI18NTools|en_US|
|Тип принимаемого значения|В зависимости от значения фильтруемой переменной|stamp, string|
|Предустановленный шаблон вывода|Для быстрого форматирования|date, short_date|
|Маска вывода|Подстановочные символы для специального форматирования|%Y %m %d|

<code php>
<?php $datetime='2002-02-20 10:23:24'; ?>
{$datetime|i18n_date:"en_US", "string", "", "%Y %m %d"}
//Результат: 2002 02 20
</code>

===== Прочие фильтры =====
==== date ====
Позволяет форматировать вывод дат.

<code php>
<? $date = mktime(0, 0, 0, 5, 2, 2007); ?>
{$variable|date:"Y-m-d"}
//Результат: "2007-05-02"</code>

==== default ====
Позволяет указать значение по-умолчанию в выражении для вывода переменной, если переменная не установлена или равна null.

<code php>
<? $variable = null; ?>
{$variable|default:"null"} {$not_set_variable|default:"not set"}
//Результат: "null not set"
</code>

==== number_format ====
Позволяет форматировать вывод чисел. Фильтр является аналогом PHP-функции **number_format**

Фильтр принимает три параметра
  - число знаков после запятой  
  - разделитель десятичной дроби
  - разделитель разрядов целочисленной части

<code php>
<? $number = 4123123; ?>
{$number|number_format:3,'.','`'}
//Результат: "4123123  4`123`123.000"</code>

==== declension ====
Добавляет к числу существительное с правильным окончанием.

<code php>
<? $number_1 = 1; ?>
{$number_1} {$number|declension:"пользователь", "пользователей", "пользователя"}

<? $number_10 = 10; ?>
{$number_10} {$number|declension:"пользователь", "пользователей", "пользователя"}

<? $number_22 = 22; ?>
{$number_22} {$number|declension:"пользователь", "пользователей", "пользователя"}

//Результаты: 
1 пользователь
10 пользователей
22 пользователя</code>

==== decode_ip ====
Преобразует числовое представление IP, в его канонический вид.

<code php>
<? $ip = -1062666387; ?>
{$ip|decode_ip}
//Результат: "192.168.255.109"</code>